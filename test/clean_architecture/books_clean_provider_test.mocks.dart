// Mocks generated by Mockito 5.4.5 from annotations
// in book_tracker/test/clean_architecture/books_clean_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:book_tracker/features/books/domain/entities/book_entity.dart'
    as _i7;
import 'package:book_tracker/features/books/domain/failures.dart' as _i6;
import 'package:book_tracker/features/books/domain/repositories/book_repository.dart'
    as _i2;
import 'package:book_tracker/features/books/domain/usecases/get_book_by_id_usecase.dart'
    as _i9;
import 'package:book_tracker/features/books/domain/usecases/get_featured_books_usecase.dart'
    as _i4;
import 'package:book_tracker/features/books/domain/usecases/search_books_usecase.dart'
    as _i8;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBookRepository_0 extends _i1.SmartFake
    implements _i2.BookRepository {
  _FakeBookRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetFeaturedBooksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFeaturedBooksUseCase extends _i1.Mock
    implements _i4.GetFeaturedBooksUseCase {
  MockGetFeaturedBooksUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBookRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.BookRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.BookEntity>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.BookEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.BookEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.BookEntity>>>);
}

/// A class which mocks [SearchBooksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchBooksUseCase extends _i1.Mock
    implements _i8.SearchBooksUseCase {
  MockSearchBooksUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBookRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.BookRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.BookEntity>>> call({
    required String? query,
    String? category,
    String? author,
    List<String>? genres,
    int? page,
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #query: query,
            #category: category,
            #author: author,
            #genres: genres,
            #page: page,
            #limit: limit,
          },
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.BookEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.BookEntity>>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #query: query,
              #category: category,
              #author: author,
              #genres: genres,
              #page: page,
              #limit: limit,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.BookEntity>>>);
}

/// A class which mocks [GetBookByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBookByIdUseCase extends _i1.Mock
    implements _i9.GetBookByIdUseCase {
  MockGetBookByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBookRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.BookRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.BookEntity>> call(String? bookId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [bookId],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.BookEntity>>.value(
            _FakeEither_1<_i6.Failure, _i7.BookEntity>(
          this,
          Invocation.method(
            #call,
            [bookId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.BookEntity>>);
}
